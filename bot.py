import os
import logging
import httpx
import pickle

from dotenv import load_dotenv
load_dotenv()

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

from api_client import ApiClient, API_URL

try:
    with open('intent_model.pkl', 'rb') as f:
        model = pickle.load(f)
    print("ML –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
except FileNotFoundError:
    print("–§–∞–π–ª –º–æ–¥–µ–ª–∏ 'intent_model.pkl' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ train_model.py –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")
    model = None

api = ApiClient(API_URL)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.")
    logger.info(f"User {update.effective_user.id} started the bot.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/add <i>[—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏]</i> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\n"
        "/edit <i>[ID] [–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç]</i> - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏\n"
        "/clear - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏"
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/add –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ</code>", parse_mode='HTML')
        return
    
    title = ' '.join(context.args)
    try:
        await api.add_task(user_id, title)
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        logger.info(f"User {user_id} added task: {title}")
    except httpx.HTTPStatusError as e:
        logger.error(f"API Error for user {user_id} on add: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    except Exception as e:
        logger.error(f"Unexpected error for user {user_id} on add: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        tasks = await api.get_tasks(user_id)
        if not tasks:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /add!")
            return
        
        await update.message.reply_text("<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:</b>", parse_mode='HTML')
        for task in tasks:
            message_text = f"<b>{task['id']}.</b> {task['title']}"
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å / üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_{task['id']}")
                ]
            ])
            await update.message.reply_text(message_text, reply_markup=keyboard, parse_mode='HTML')

    except httpx.HTTPStatusError as e:
        logger.error(f"API Error for user {user_id} on list: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.")
    except Exception as e:
        logger.error(f"Unexpected error for user {user_id} on list: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    action, task_id_str = query.data.split('_', 1)
    task_id = int(task_id_str)

    try:
        if action == "remove":
            await api.remove_task(user_id, task_id)
            await query.edit_message_text(f"–ó–∞–¥–∞—á–∞ [ID: {task_id}] —É–¥–∞–ª–µ–Ω–∞.")
            logger.info(f"User {user_id} removed task {task_id}.")
        
        elif action == "done":
            await api.remove_task(user_id, task_id)
            await query.edit_message_text(f"–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ —É–±—Ä–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
            logger.info(f"User {user_id} completed task {task_id}.")

    except httpx.HTTPStatusError as e:
        if e.response.status_code == 404:
            await query.edit_message_text("–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            logger.error(f"API Error for user {user_id} on button click: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.")
    except Exception as e:
        logger.error(f"Unexpected error for user {user_id} on button click: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

async def edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args or len(context.args) < 2 or not context.args[0].isdigit():
        await update.message.reply_text("<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/edit [ID] [–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç]</code>", parse_mode='HTML')
        return

    task_id = int(context.args[0])
    new_title = ' '.join(context.args[1:])
    try:
        await api.update_task_title(user_id, task_id, new_title)
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ [ID: {task_id}] –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        logger.info(f"User {user_id} edited task {task_id}.")
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 404:
            await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    except Exception as e:
        logger.error(f"Unexpected error for user {user_id} on edit: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        await api.clear_tasks(user_id)
        await update.message.reply_text("‚úÖ –í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        logger.info(f"User {user_id} cleared all tasks.")
    except httpx.HTTPStatusError as e:
        logger.error(f"API Error for user {user_id} on clear: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")
    except Exception as e:
        logger.error(f"Unexpected error for user {user_id} on clear: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ML-–º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π.
    """
    if model is None:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥—É–ª—å –ò–ò –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    text = update.message.text
    
    intent = model.predict([text])[0]

    match intent:
        case "GREETING":
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        
        case "THANKS":
            await update.message.reply_text("–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")
            
        case "LIST_TASKS":
            await list_tasks(update, context)
            
        case "ADD_TASK":
            context.args = text.split()
            await add(update, context)
            
        case "UNKNOWN":
            await update.message.reply_text(
                "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á. "
                "–î–ª—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."
            )
        
        case _:
            await update.message.reply_text("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å, –Ω–æ —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –Ω–∞ —ç—Ç–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å.")


if __name__ == "__main__":
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("list", list_tasks))
    app.add_handler(CommandHandler("edit", edit))
    app.add_handler(CommandHandler("clear", clear))
    
    app.add_handler(CallbackQueryHandler(button_handler))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å ML-–º–æ–¥–µ–ª—å—é...")
    app.run_polling()